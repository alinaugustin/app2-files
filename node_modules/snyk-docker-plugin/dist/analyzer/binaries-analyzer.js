"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var docker_1 = require("../docker");
var semver = require('semver');
function analyze(targetImage, installedPackages) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var binaries;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getBinaries(targetImage, installedPackages)];
                case 1:
                    binaries = _a.sent();
                    return [2 /*return*/, {
                            Image: targetImage,
                            AnalyzeType: 'binaries',
                            Analysis: binaries,
                        }];
            }
        });
    });
}
exports.analyze = analyze;
function getBinaries(targetImage, installedPackages) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var binaries, node;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    binaries = [];
                    return [4 /*yield*/, getNodeBinary(targetImage, installedPackages)];
                case 1:
                    node = _a.sent();
                    if (node) {
                        binaries.push(node);
                    }
                    return [2 /*return*/, binaries];
            }
        });
    });
}
function getNodeBinary(targetImage, installedPackages) {
    if (installedByPackageManager(['node', 'nodejs'], installedPackages)) {
        return null;
    }
    return new docker_1.Docker(targetImage).run('node', ['--version'])
        .catch(function (stderr) {
        if (typeof stderr === 'string' && stderr.indexOf('not found') >= 0) {
            return '';
        }
        throw new Error(stderr);
    })
        .then(parseNodeBinary);
}
function installedByPackageManager(binaryPkgNames, installedPackages) {
    return installedPackages
        .filter(function (pkg) { return binaryPkgNames.indexOf(pkg) > -1; }).length > 0;
}
function parseNodeBinary(version) {
    var nodeVersion = semver.valid(version.trim());
    if (!nodeVersion) {
        return null;
    }
    return {
        name: 'node',
        version: nodeVersion,
    };
}
//# sourceMappingURL=binaries-analyzer.js.map